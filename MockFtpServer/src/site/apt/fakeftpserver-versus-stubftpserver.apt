		--------------------------------------------------
				FakeFtpServer versus StubFtpServer
		--------------------------------------------------

FakeFtpServer or StubFtpServer?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  The <<MockFtpServer>> project includes two separate <mock> implementations of an FTP Server. Which one you
  use is dependent on what kind of FTP scenario(s) you wish to simulate, and what level of control you need
  over exact server replies.

* FakeFtpServer
~~~~~~~~~~~~~~~

  <<FakeFtpServer>> provides a high-level abstraction for an FTP Server and is suitable for most testing
  and simulation scenarios. You define a filesystem (internal, in-memory) containing an arbitrary set of
  files and directories. These files and directories can (optionally) have associated access permissions.
  You also configure a set of one or more user accounts, used at login and when assigning file and
  directory ownership.

  <<FakeFtpServer>> processes FTP client requests and responds with reply codes and reply messages
  consistent with its configuration and the contents of its internal filesystem, including file and
  directory permissions, if they have been configured.

  Some of the mainline success scenarios that you can simulate with <<FakeFtpServer>> include:

    * Login (USER/PASS): with password, or when no password is required

    * Retrieve existing file (RETR) from the server

    * Send file to the server (STOR,STOU,APPE)

    * List of file entries (LIST) and list of filenames (NLST)

    * Print current working directory (PWD)

    * Change current working directory (CWD)

    * Rename an existing file (RNFR/RNTO)

    * Delete an existing file (DELE)

    * Create directory (MKD)

    * Remove directory (RMD)

    * Both active and passive mode (PASV) data transfers

  Some of the error scenarios that you can simulate with <<FakeFtpServer>> include:

    * Failed login (USER/PASS): no such user, wrong password

    * Invalid client requests: missing required parameter, not logged in

    * Failed retrieve (RETR): no such file, missing required access permissions for the current user

    * Failed send (STOR,STOU,APPE): missing required access permissions for the current user

    * Failed change current working directory (CWD): no such directory, missing required access permissions for the current user

    * Failed delete an existing file (DELE): file does not exist, missing required access permissions for the current user

    * Failed rename (RNFR/RNTO): no such file, missing required access permissions for the current user

    * Failed create directory (MKD): parent directory does not exist, directory already exists, missing required access permissions for the current user

    * Failed remove directory (RMD): no such directory, directory not empty, missing required access permissions for the current user

  See the {{{fakeftpserver-features.html}Features and Limitations}} page for more information on which features
  and scenarios are not supported.

* StubFtpServer
~~~~~~~~~~~~~~~

  <<FakeFtpServer>> includes a simulated server file system, including support for file and directory permissions
  and owner and group authorization based on Unix. This file system can be populated at startup (or thereafter) with
  directories and files (including arbitrary content) to be retrieved by an FTP client. Any files sent to the server
  by an FTP client exist within that file system as well, and can be accessed through the file system API, or
  can even be subsequently retrieved by an FTP client.
